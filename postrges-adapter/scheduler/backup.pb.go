// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: backup.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackupRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DbUri        string                 `protobuf:"bytes,1,opt,name=db_uri,json=dbUri,proto3" json:"db_uri,omitempty"`                      // URI базы данных
	DbPort       int64                  `protobuf:"varint,2,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`                  // Порт базы данных
	DbUser       string                 `protobuf:"bytes,3,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`                   // Пользователь базы данных
	DbPass       string                 `protobuf:"bytes,4,opt,name=db_pass,json=dbPass,proto3" json:"db_pass,omitempty"`                   // Пароль пользователя
	DbName       string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                   // Имя базы данных
	DatabaseType string                 `protobuf:"bytes,6,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // Тип базы данных (например, postgres)
	Schedule     string                 `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`                             // Расписание бэкапов (cron-формат)
	StorageClass string                 `protobuf:"bytes,8,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"` // Класс хранилища (например, s3)
	// Параметры MinIO (S3)
	S3Endpoint    string `protobuf:"bytes,9,opt,name=s3_endpoint,json=s3Endpoint,proto3" json:"s3_endpoint,omitempty"`          // Endpoint MinIO (например, http://minio-service:9000)
	S3AccessKey   string `protobuf:"bytes,10,opt,name=s3_access_key,json=s3AccessKey,proto3" json:"s3_access_key,omitempty"`    // Access Key для MinIO
	S3SecretKey   string `protobuf:"bytes,11,opt,name=s3_secret_key,json=s3SecretKey,proto3" json:"s3_secret_key,omitempty"`    // Secret Key для MinIO
	S3BucketName  string `protobuf:"bytes,12,opt,name=s3_bucket_name,json=s3BucketName,proto3" json:"s3_bucket_name,omitempty"` // Имя бакета в MinIO
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupRequest) Reset() {
	*x = BackupRequest{}
	mi := &file_backup_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRequest) ProtoMessage() {}

func (x *BackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRequest.ProtoReflect.Descriptor instead.
func (*BackupRequest) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{0}
}

func (x *BackupRequest) GetDbUri() string {
	if x != nil {
		return x.DbUri
	}
	return ""
}

func (x *BackupRequest) GetDbPort() int64 {
	if x != nil {
		return x.DbPort
	}
	return 0
}

func (x *BackupRequest) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *BackupRequest) GetDbPass() string {
	if x != nil {
		return x.DbPass
	}
	return ""
}

func (x *BackupRequest) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *BackupRequest) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *BackupRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *BackupRequest) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *BackupRequest) GetS3Endpoint() string {
	if x != nil {
		return x.S3Endpoint
	}
	return ""
}

func (x *BackupRequest) GetS3AccessKey() string {
	if x != nil {
		return x.S3AccessKey
	}
	return ""
}

func (x *BackupRequest) GetS3SecretKey() string {
	if x != nil {
		return x.S3SecretKey
	}
	return ""
}

func (x *BackupRequest) GetS3BucketName() string {
	if x != nil {
		return x.S3BucketName
	}
	return ""
}

type BackupResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Status           string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                             // Статус выполнения операции
	CronjobName      string                 `protobuf:"bytes,2,opt,name=cronjob_name,json=cronjobName,proto3" json:"cronjob_name,omitempty"`                // Имя созданного CronJob
	CronjobNamespace string                 `protobuf:"bytes,3,opt,name=cronjob_namespace,json=cronjobNamespace,proto3" json:"cronjob_namespace,omitempty"` // Namespace CronJob
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BackupResponse) Reset() {
	*x = BackupResponse{}
	mi := &file_backup_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupResponse) ProtoMessage() {}

func (x *BackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupResponse.ProtoReflect.Descriptor instead.
func (*BackupResponse) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{1}
}

func (x *BackupResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BackupResponse) GetCronjobName() string {
	if x != nil {
		return x.CronjobName
	}
	return ""
}

func (x *BackupResponse) GetCronjobNamespace() string {
	if x != nil {
		return x.CronjobNamespace
	}
	return ""
}

type BackupRestore struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DbUri        string                 `protobuf:"bytes,1,opt,name=db_uri,json=dbUri,proto3" json:"db_uri,omitempty"`                      // URI базы данных
	DbPort       int64                  `protobuf:"varint,2,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`                  // Порт базы данных
	DbUser       string                 `protobuf:"bytes,3,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`                   // Пользователь базы данных
	DbPass       string                 `protobuf:"bytes,4,opt,name=db_pass,json=dbPass,proto3" json:"db_pass,omitempty"`                   // Пароль пользователя
	DbName       string                 `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`                   // Имя базы данных
	DatabaseType string                 `protobuf:"bytes,6,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // Тип базы данных (например, postgres)
	Schedule     string                 `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`                             // Расписание бэкапов (cron-формат)
	StorageClass string                 `protobuf:"bytes,8,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"` // Класс хранилища (например, s3)
	// Параметры MinIO (S3)
	S3Endpoint    string `protobuf:"bytes,9,opt,name=s3_endpoint,json=s3Endpoint,proto3" json:"s3_endpoint,omitempty"`          // Endpoint MinIO (например, http://minio-service:9000)
	S3AccessKey   string `protobuf:"bytes,10,opt,name=s3_access_key,json=s3AccessKey,proto3" json:"s3_access_key,omitempty"`    // Access Key для MinIO
	S3SecretKey   string `protobuf:"bytes,11,opt,name=s3_secret_key,json=s3SecretKey,proto3" json:"s3_secret_key,omitempty"`    // Secret Key для MinIO
	S3BucketName  string `protobuf:"bytes,12,opt,name=s3_bucket_name,json=s3BucketName,proto3" json:"s3_bucket_name,omitempty"` // Имя бакета в MinIO
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupRestore) Reset() {
	*x = BackupRestore{}
	mi := &file_backup_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestore) ProtoMessage() {}

func (x *BackupRestore) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestore.ProtoReflect.Descriptor instead.
func (*BackupRestore) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{2}
}

func (x *BackupRestore) GetDbUri() string {
	if x != nil {
		return x.DbUri
	}
	return ""
}

func (x *BackupRestore) GetDbPort() int64 {
	if x != nil {
		return x.DbPort
	}
	return 0
}

func (x *BackupRestore) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *BackupRestore) GetDbPass() string {
	if x != nil {
		return x.DbPass
	}
	return ""
}

func (x *BackupRestore) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *BackupRestore) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

func (x *BackupRestore) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *BackupRestore) GetStorageClass() string {
	if x != nil {
		return x.StorageClass
	}
	return ""
}

func (x *BackupRestore) GetS3Endpoint() string {
	if x != nil {
		return x.S3Endpoint
	}
	return ""
}

func (x *BackupRestore) GetS3AccessKey() string {
	if x != nil {
		return x.S3AccessKey
	}
	return ""
}

func (x *BackupRestore) GetS3SecretKey() string {
	if x != nil {
		return x.S3SecretKey
	}
	return ""
}

func (x *BackupRestore) GetS3BucketName() string {
	if x != nil {
		return x.S3BucketName
	}
	return ""
}

type BackupRestoreResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`                                 // Статус выполнения операции
	JobName       string                 `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`                // Имя созданного Job
	JobNamespace  string                 `protobuf:"bytes,3,opt,name=job_namespace,json=jobNamespace,proto3" json:"job_namespace,omitempty"` // Namespace Job
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupRestoreResponse) Reset() {
	*x = BackupRestoreResponse{}
	mi := &file_backup_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupRestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRestoreResponse) ProtoMessage() {}

func (x *BackupRestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRestoreResponse.ProtoReflect.Descriptor instead.
func (*BackupRestoreResponse) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{3}
}

func (x *BackupRestoreResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BackupRestoreResponse) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *BackupRestoreResponse) GetJobNamespace() string {
	if x != nil {
		return x.JobNamespace
	}
	return ""
}

type MetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseType  string                 `protobuf:"bytes,1,opt,name=database_type,json=databaseType,proto3" json:"database_type,omitempty"` // Тип базы данных (например, postgres)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	mi := &file_backup_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{4}
}

func (x *MetricsRequest) GetDatabaseType() string {
	if x != nil {
		return x.DatabaseType
	}
	return ""
}

type MetricsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SuccessfulBackups int32                  `protobuf:"varint,1,opt,name=successful_backups,json=successfulBackups,proto3" json:"successful_backups,omitempty"` // Количество успешных бэкапов
	FailedBackups     int32                  `protobuf:"varint,2,opt,name=failed_backups,json=failedBackups,proto3" json:"failed_backups,omitempty"`             // Количество неуспешных бэкапов
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	mi := &file_backup_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backup_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_backup_proto_rawDescGZIP(), []int{5}
}

func (x *MetricsResponse) GetSuccessfulBackups() int32 {
	if x != nil {
		return x.SuccessfulBackups
	}
	return 0
}

func (x *MetricsResponse) GetFailedBackups() int32 {
	if x != nil {
		return x.FailedBackups
	}
	return 0
}

var File_backup_proto protoreflect.FileDescriptor

const file_backup_proto_rawDesc = "" +
	"\n" +
	"\fbackup.proto\x12\x06backup\"\xff\x02\n" +
	"\rBackupRequest\x12\x15\n" +
	"\x06db_uri\x18\x01 \x01(\tR\x05dbUri\x12\x17\n" +
	"\adb_port\x18\x02 \x01(\x03R\x06dbPort\x12\x17\n" +
	"\adb_user\x18\x03 \x01(\tR\x06dbUser\x12\x17\n" +
	"\adb_pass\x18\x04 \x01(\tR\x06dbPass\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\x12#\n" +
	"\rdatabase_type\x18\x06 \x01(\tR\fdatabaseType\x12\x1a\n" +
	"\bschedule\x18\a \x01(\tR\bschedule\x12#\n" +
	"\rstorage_class\x18\b \x01(\tR\fstorageClass\x12\x1f\n" +
	"\vs3_endpoint\x18\t \x01(\tR\n" +
	"s3Endpoint\x12\"\n" +
	"\rs3_access_key\x18\n" +
	" \x01(\tR\vs3AccessKey\x12\"\n" +
	"\rs3_secret_key\x18\v \x01(\tR\vs3SecretKey\x12$\n" +
	"\x0es3_bucket_name\x18\f \x01(\tR\fs3BucketName\"x\n" +
	"\x0eBackupResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12!\n" +
	"\fcronjob_name\x18\x02 \x01(\tR\vcronjobName\x12+\n" +
	"\x11cronjob_namespace\x18\x03 \x01(\tR\x10cronjobNamespace\"\xff\x02\n" +
	"\rBackupRestore\x12\x15\n" +
	"\x06db_uri\x18\x01 \x01(\tR\x05dbUri\x12\x17\n" +
	"\adb_port\x18\x02 \x01(\x03R\x06dbPort\x12\x17\n" +
	"\adb_user\x18\x03 \x01(\tR\x06dbUser\x12\x17\n" +
	"\adb_pass\x18\x04 \x01(\tR\x06dbPass\x12\x17\n" +
	"\adb_name\x18\x05 \x01(\tR\x06dbName\x12#\n" +
	"\rdatabase_type\x18\x06 \x01(\tR\fdatabaseType\x12\x1a\n" +
	"\bschedule\x18\a \x01(\tR\bschedule\x12#\n" +
	"\rstorage_class\x18\b \x01(\tR\fstorageClass\x12\x1f\n" +
	"\vs3_endpoint\x18\t \x01(\tR\n" +
	"s3Endpoint\x12\"\n" +
	"\rs3_access_key\x18\n" +
	" \x01(\tR\vs3AccessKey\x12\"\n" +
	"\rs3_secret_key\x18\v \x01(\tR\vs3SecretKey\x12$\n" +
	"\x0es3_bucket_name\x18\f \x01(\tR\fs3BucketName\"o\n" +
	"\x15BackupRestoreResponse\x12\x16\n" +
	"\x06status\x18\x01 \x01(\tR\x06status\x12\x19\n" +
	"\bjob_name\x18\x02 \x01(\tR\ajobName\x12#\n" +
	"\rjob_namespace\x18\x03 \x01(\tR\fjobNamespace\"5\n" +
	"\x0eMetricsRequest\x12#\n" +
	"\rdatabase_type\x18\x01 \x01(\tR\fdatabaseType\"g\n" +
	"\x0fMetricsResponse\x12-\n" +
	"\x12successful_backups\x18\x01 \x01(\x05R\x11successfulBackups\x12%\n" +
	"\x0efailed_backups\x18\x02 \x01(\x05R\rfailedBackups2\xc8\x01\n" +
	"\rBackupService\x127\n" +
	"\x06Backup\x12\x15.backup.BackupRequest\x1a\x16.backup.BackupResponse\x12?\n" +
	"\aRestore\x12\x15.backup.BackupRestore\x1a\x1d.backup.BackupRestoreResponse\x12=\n" +
	"\n" +
	"GetMetrics\x12\x16.backup.MetricsRequest\x1a\x17.backup.MetricsResponseB\x03Z\x01.b\x06proto3"

var (
	file_backup_proto_rawDescOnce sync.Once
	file_backup_proto_rawDescData []byte
)

func file_backup_proto_rawDescGZIP() []byte {
	file_backup_proto_rawDescOnce.Do(func() {
		file_backup_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backup_proto_rawDesc), len(file_backup_proto_rawDesc)))
	})
	return file_backup_proto_rawDescData
}

var file_backup_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_backup_proto_goTypes = []any{
	(*BackupRequest)(nil),         // 0: backup.BackupRequest
	(*BackupResponse)(nil),        // 1: backup.BackupResponse
	(*BackupRestore)(nil),         // 2: backup.BackupRestore
	(*BackupRestoreResponse)(nil), // 3: backup.BackupRestoreResponse
	(*MetricsRequest)(nil),        // 4: backup.MetricsRequest
	(*MetricsResponse)(nil),       // 5: backup.MetricsResponse
}
var file_backup_proto_depIdxs = []int32{
	0, // 0: backup.BackupService.Backup:input_type -> backup.BackupRequest
	2, // 1: backup.BackupService.Restore:input_type -> backup.BackupRestore
	4, // 2: backup.BackupService.GetMetrics:input_type -> backup.MetricsRequest
	1, // 3: backup.BackupService.Backup:output_type -> backup.BackupResponse
	3, // 4: backup.BackupService.Restore:output_type -> backup.BackupRestoreResponse
	5, // 5: backup.BackupService.GetMetrics:output_type -> backup.MetricsResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_backup_proto_init() }
func file_backup_proto_init() {
	if File_backup_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backup_proto_rawDesc), len(file_backup_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backup_proto_goTypes,
		DependencyIndexes: file_backup_proto_depIdxs,
		MessageInfos:      file_backup_proto_msgTypes,
	}.Build()
	File_backup_proto = out.File
	file_backup_proto_goTypes = nil
	file_backup_proto_depIdxs = nil
}
